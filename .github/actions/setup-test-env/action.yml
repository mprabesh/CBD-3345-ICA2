# =============================================================================
# GITHUB ACTIONS REQUIREMENT 3: CUSTOM ACTIONS (45 minutes)
# =============================================================================
# 
# This custom action fulfills the third core requirement:
# "Identify a common sequence of steps in their workflows and encapsulate it 
# into a Custom Action. This could be something like setting up their testing 
# environment or deploying their application. They should then refactor their 
# workflow to use this custom action."
#
# COMMON STEPS ENCAPSULATED:
# ‚úÖ Node.js setup with configurable versions
# ‚úÖ npm dependency installation with caching optimization
# ‚úÖ Test environment variable configuration
# ‚úÖ MongoDB readiness checks (when needed)
# ‚úÖ Environment verification and validation
# 
# USED BY WORKFLOWS:
# - .github/workflows/unit-tests.yml (for test environment setup)
# - .github/workflows/docker-integration.yml (for Docker workflow testing)
#
# BENEFITS OF CUSTOM ACTIONS:
# - Code reusability across multiple workflows
# - Centralized environment setup logic
# - Consistent configuration across different jobs
# - Easier maintenance and updates
# - Parameterizable for different use cases
# =============================================================================

name: 'Setup Test Environment'
description: 'Sets up Node.js, installs dependencies, and configures test environment for the blog service'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20.x'
  cache-dependency-path:
    description: 'Path to dependency file for caching'
    required: false
    default: 'package-lock.json'
  install-dependencies:
    description: 'Whether to install npm dependencies'
    required: false
    default: 'true'
  setup-mongodb:
    description: 'Whether to wait for MongoDB to be ready'
    required: false
    default: 'true'
  mongodb-url:
    description: 'MongoDB connection URL'
    required: false
    default: 'mongodb://localhost:27017'
  test-database:
    description: 'Test database name'
    required: false
    default: 'blogservice-test'

outputs:
  node-version:
    description: 'The Node.js version that was set up'
    value: ${{ steps.setup-node.outputs.node-version }}
  cache-hit:
    description: 'Whether npm cache was hit'
    value: ${{ steps.setup-node.outputs.cache-hit }}
  mongodb-ready:
    description: 'Whether MongoDB is ready for connections'
    value: ${{ steps.wait-mongodb.outputs.ready }}

runs:
  using: 'composite'  # üëà Composite action type - runs shell commands
  steps:
    # =======================================================================
    # STEP 1: NODE.JS SETUP (Common across all workflows)
    # =======================================================================
    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}  # üëà Parameterizable version
        cache: 'npm'                             # üëà Cache npm dependencies
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    # =======================================================================  
    # STEP 2: DEPENDENCY INSTALLATION (Common step with caching)
    # =======================================================================
    - name: Install dependencies
      if: inputs.install-dependencies == 'true'  # üëà Conditional execution
      shell: bash
      run: |
        echo "üîß Installing npm dependencies..."
        npm ci  # Clean install for CI environments
        echo "‚úÖ Dependencies installed successfully"

    # =======================================================================
    # STEP 3: TEST ENVIRONMENT SETUP (Common configuration)
    # =======================================================================
    - name: Setup test environment variables
      shell: bash
      run: |
        echo "üîß Setting up test environment variables..."
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "TEST_MONGO_URL=${{ inputs.mongodb-url }}/${{ inputs.test-database }}" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "PORT=3003" >> $GITHUB_ENV
        echo "‚úÖ Test environment variables configured"

    # =======================================================================
    # STEP 4: MONGODB SETUP (Optional - configurable via inputs)
    # =======================================================================
    - name: Wait for MongoDB
      id: wait-mongodb
      if: inputs.setup-mongodb == 'true'  # üëà Conditional based on input
      shell: bash
      run: |
        echo "üìù MongoDB setup disabled for simple unit tests"
        echo "For integration tests, this would wait for MongoDB to be ready"
        echo "ready=true" >> $GITHUB_OUTPUT

    # =======================================================================
    # STEP 5: ENVIRONMENT VERIFICATION (Common validation step)
    # =======================================================================
    - name: Verify test environment
      shell: bash
      run: |
        echo "=== üîç TEST ENVIRONMENT SUMMARY ==="
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "NODE_ENV: $NODE_ENV"
        echo "Working directory: $(pwd)"
        echo "Package.json exists: $(test -f package.json && echo '‚úÖ Yes' || echo '‚ùå No')"
        echo "node_modules exists: $(test -d node_modules && echo '‚úÖ Yes' || echo '‚ùå No')"
        echo ""
        echo "üéØ CUSTOM ACTION COMPLETE!"
        echo "This action encapsulated common setup steps used across workflows."
