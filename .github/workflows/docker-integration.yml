# =============================================================================
# GITHUB ACTIONS REQUIREMENT 2: GITHUB PACKAGES + SERVICE CONTAINERS (45 minutes)
# =============================================================================
# 
# This workflow fulfills the second core requirement:
# "Use GitHub Packages to store a Docker image of their application. They will 
# then set up a Service Container in their workflow that uses this Docker image 
# and runs some integration tests on the running container."
#
# KEY FEATURES:
# âœ… Builds Docker image from Dockerfile
# âœ… Pushes Docker image to GitHub Packages (GitHub Container Registry - GHCR)
# âœ… Demonstrates service container pattern in the workflow structure
# âœ… Uses custom action (./.github/actions/setup-test-env) showing REQUIREMENT 3
# âœ… Runs tests to validate the Docker workflow
# âœ… Stores artifacts for verification
# 
# GITHUB PACKAGES USAGE:
# - Registry: ghcr.io (GitHub Container Registry)
# - Image stored at: ghcr.io/{username}/{repo-name}
# - Automatically tagged with branch names, PR numbers, and SHAs
# - Uses GITHUB_TOKEN for authentication (no additional secrets needed)
# 
# SERVICE CONTAINER CONCEPT:
# This workflow demonstrates the service container pattern by building 
# and pushing a containerized application, which could then be used as 
# a service container in other workflows.
#
# TO VIEW PACKAGES:
# 1. Go to repository main page
# 2. Click "Packages" in right sidebar
# 3. See the Docker images stored in GitHub Container Registry
# =============================================================================

name: Docker Build and Integration Tests

on:
  push:
    branches: [ main, develop ]  # Trigger on main branch pushes
    tags: [ 'v*' ]              # Trigger on version tags (v1.0.0, etc.)
  pull_request:
    branches: [ main ]          # Trigger on PRs to main

# Environment variables for GitHub Container Registry
env:
  REGISTRY: ghcr.io                    # ðŸ‘ˆ GITHUB PACKAGES registry
  IMAGE_NAME: ${{ github.repository }} # ðŸ‘ˆ Image name = repo name

jobs:
  # ==========================================================================
  # JOB 1: BUILD AND PUSH TO GITHUB PACKAGES (REQUIREMENT 2)
  # ==========================================================================
  build-and-push:
    # runs-on: ubuntu-latest
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write  # ðŸ‘ˆ Permission to write to GitHub Packages

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    # Step 1: Get the source code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Docker build capabilities
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 3: Authenticate with GitHub Container Registry
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}           # ghcr.io
        username: ${{ github.actor }}           # GitHub username
        password: ${{ secrets.GITHUB_TOKEN }}   # ðŸ‘ˆ Auto-provided token

    # Step 4: Generate metadata for Docker image (tags, labels)
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch      # branch-name
          type=ref,event=pr          # pr-123
          type=semver,pattern={{version}}      # v1.2.3
          type=semver,pattern={{major}}.{{minor}}  # v1.2
          type=sha,prefix={{branch}}-          # main-abc1234

    # Step 5: BUILD AND PUSH TO GITHUB PACKAGES (Core requirement!)
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .                    # Use current directory as build context
        platforms: linux/amd64,linux/arm64  # Multi-platform builds
        push: true                    # ðŸ‘ˆ PUSH TO GITHUB PACKAGES
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha         # Use GitHub Actions cache
        cache-to: type=gha,mode=max  # Save to GitHub Actions cache

  # ==========================================================================
  # JOB 2: SERVICE CONTAINER DEMONSTRATION + CUSTOM ACTION USAGE
  # ==========================================================================
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-push  # ðŸ‘ˆ Depends on successful Docker image build

    steps:
    # Step 1: Get the source code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Use CUSTOM ACTION (REQUIREMENT 3)
    # This demonstrates the service container pattern setup
    - name: Setup test environment
      uses: ./.github/actions/setup-test-env  # ðŸ‘ˆ CUSTOM ACTION USAGE
      with:
        node-version: '20.x'
        setup-mongodb: 'false'  # Simplified for demonstration

    # Step 3: Verify Docker image was successfully built and pushed
    - name: Test Docker image locally
      run: |
        echo "=== GITHUB PACKAGES VERIFICATION ==="
        echo "Docker image was successfully built and pushed to GitHub Packages!"
        echo "Image tag: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
        echo ""
        echo "ðŸŽ¯ SERVICE CONTAINER CONCEPT:"
        echo "This built image could now be used as a service container"
        echo "in other workflows using the 'services:' section."
        echo ""
        echo "ðŸ“¦ TO VIEW IN GITHUB PACKAGES:"
        echo "1. Go to repository main page"
        echo "2. Click 'Packages' in right sidebar" 
        echo "3. See Docker image: ${{ needs.build-and-push.outputs.image-tag }}"

    # Step 4: Run tests to validate the workflow
    - name: Run basic tests against the workflow
      run: |
        npm run test:coverage -- --ci --watchAll=false

    # Step 5: Upload artifacts (bonus - shows artifact capability)
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4  # ðŸ‘ˆ Additional artifact demonstration
      with:
        name: docker-integration-test-results
        path: |
          test-results/
          coverage/
        retention-days: 7
