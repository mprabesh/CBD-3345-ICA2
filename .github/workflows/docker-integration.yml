name: Docker Build and Integration Tests

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    strategy:
      matrix:
        test-suite: [api, database, auth]

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      blog-service:
        image: ${{ needs.build-and-push.outputs.image-tag }}
        ports:
          - 3003:3003
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://mongodb:27017/blogservice
          TEST_MONGO_URL: mongodb://mongodb:27017/blogservice-test
          SECRET_KEY: integration-test-secret-key
          PORT: 3003
        options: >-
          --health-cmd "curl -f http://localhost:3003/api/users || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for services
      run: |
        echo "Waiting for MongoDB..."
        timeout 60 bash -c 'until mongosh mongodb://localhost:27017/test --eval "db.runCommand({ping: 1})" --quiet; do sleep 2; done'
        
        echo "Waiting for Redis..."
        timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 2; done'
        
        echo "Waiting for Blog Service..."
        timeout 120 bash -c 'until curl -f http://localhost:3003/api/users > /dev/null 2>&1; do sleep 3; done'

    - name: Run API integration tests
      if: matrix.test-suite == 'api'
      env:
        NODE_ENV: test
        TEST_MONGO_URL: mongodb://localhost:27017/blogservice-test
        SECRET_KEY: integration-test-secret-key
        API_BASE_URL: http://localhost:3003
      run: |
        npm run test -- --testNamePattern="API Integration" --forceExit

    - name: Run database integration tests
      if: matrix.test-suite == 'database'
      env:
        NODE_ENV: test
        TEST_MONGO_URL: mongodb://localhost:27017/blogservice-test
        SECRET_KEY: integration-test-secret-key
      run: |
        npm run test -- --testNamePattern="Database Integration" --forceExit

    - name: Run authentication integration tests
      if: matrix.test-suite == 'auth'
      env:
        NODE_ENV: test
        TEST_MONGO_URL: mongodb://localhost:27017/blogservice-test
        SECRET_KEY: integration-test-secret-key
        API_BASE_URL: http://localhost:3003
      run: |
        npm run test -- --testNamePattern="Auth Integration" --forceExit

    - name: Collect service logs
      if: failure()
      run: |
        echo "=== Blog Service Logs ==="
        docker logs $(docker ps -q --filter ancestor=${{ needs.build-and-push.outputs.image-tag }})
        echo "=== MongoDB Logs ==="
        docker logs $(docker ps -q --filter ancestor=mongo:7)

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ matrix.test-suite }}
        path: |
          test-results/
          coverage/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
