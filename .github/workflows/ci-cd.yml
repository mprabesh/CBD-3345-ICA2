name: 'Blog Service CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  packages: write

env:
  NODE_VERSION: '18'
  SECRET_KEY: 'test-secret-key'
  PORT: 3003
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 'Test Blog Service'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Test Environment
        uses: ./.github/actions/setup-node-test-env
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup MongoDB for Testing
        uses: ./.github/actions/setup-mongodb
        with:
          mongodb-version: '6.0'
          database-name: 'blogservice-testdb'
          seed-database: 'false'

      - name: Lint and Test
        uses: ./.github/actions/lint-and-test
        with:
          coverage: 'true'
          test-timeout: '30000'

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results/
            coverage/
            junit.xml
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Jest Tests
          path: test-results/test-results.xml
          reporter: jest-junit

  build:
    name: 'Build Docker Image'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image
        run: |
          echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:${{ github.ref_name }}-${{ github.sha }}

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image
        run: |
          echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to staging
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:staging
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:staging-${{ github.sha }}

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image
        run: |
          echo "name=${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to production
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:latest
            ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:prod-${{ github.sha }}
