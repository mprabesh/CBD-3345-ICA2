name: 'Blog Service CI/CD with Integration Tests'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SECRET_KEY: 'test-secret-key'
  PORT: 3003
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js Test Environment
        uses: ./.github/actions/setup-node-test-env
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup MongoDB for Testing
        uses: ./.github/actions/setup-mongodb
        with:
          mongodb-version: '6.0'
          database-name: 'blogservice-testdb'
          seed-database: 'false'

      - name: Lint and Test
        uses: ./.github/actions/lint-and-test
        with:
          coverage: 'true'
          test-timeout: '30000'

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results/
            coverage/
            junit.xml
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Jest Unit Tests
          path: test-results/test-results.xml
          reporter: jest-junit

  build-and-push:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      blog-service:
        image: ${{ needs.build-and-push.outputs.image-tag }}
        env:
          NODE_ENV: test
          SECRET_KEY: test-secret-key
          PORT: 3003
          MONGO_URL: mongodb://root:example@mongodb:27017/blogservice-testdb?authSource=admin
        ports:
          - 3003:3003
        options: >-
          --health-cmd "curl -f http://localhost:3003/api/ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services to be ready
        run: |
          echo "Waiting for blog service to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:3003/api/ping; do sleep 2; done'
          echo "âœ… Blog service is ready!"

      - name: Run integration tests
        env:
          API_BASE_URL: http://localhost:3003
          NODE_ENV: test
          JEST_JUNIT_OUTPUT_DIR: test-results-integration
          JEST_JUNIT_OUTPUT_NAME: integration-test-results.xml
        run: |
          mkdir -p test-results-integration
          npm run test:integration -- \
            --reporters=default \
            --reporters=jest-junit \
            --testResultsProcessor=jest-junit

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_number }}
          path: |
            test-results-integration/
          retention-days: 30

      - name: Publish Integration Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Integration Tests
          path: test-results-integration/integration-test-results.xml
          reporter: jest-junit

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [test, build-and-push, integration-test]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging
    
    steps:
      - name: Deploy to Staging Environment
        run: |
          echo "ðŸš€ Deploying image ${{ needs.build-and-push.outputs.image-tag }} to staging"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your staging deployment logic here

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test, build-and-push, integration-test]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    
    steps:
      - name: Deploy to Production Environment
        run: |
          echo "ðŸš€ Deploying image ${{ needs.build-and-push.outputs.image-tag }} to production"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your production deployment logic here
